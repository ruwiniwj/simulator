/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.wso2.carbon.event.simulator.randomdatafeedsimulation.core;


import org.apache.log4j.Logger;
import org.wso2.carbon.event.executionplandelpoyer.Event;
import org.wso2.carbon.event.executionplandelpoyer.ExecutionPlanDeployer;
import org.wso2.carbon.event.executionplandelpoyer.ExecutionPlanDto;
import org.wso2.carbon.event.executionplandelpoyer.StreamDefinitionDto;
import org.wso2.carbon.event.simulator.EventSimulator;
import org.wso2.carbon.event.simulator.bean.FeedSimulationStreamConfiguration;
import org.wso2.carbon.event.simulator.exception.EventSimulationException;
import org.wso2.carbon.event.simulator.randomdatafeedsimulation.bean.FeedSimulationStreamAttributeDto;
import org.wso2.carbon.event.simulator.randomdatafeedsimulation.bean.RandomDataSimulationDto;
import org.wso2.carbon.event.simulator.randomdatafeedsimulation.utils.AttributeGenerator;
import org.wso2.carbon.event.simulator.utils.EventConverter;
import org.wso2.carbon.event.simulator.utils.EventSender;

import java.util.Arrays;


/**
 * This simulator simulates the execution plan by sending events. These events are generated by
 * generated random values according to given configuration.
 * <p>
 * This simulator class implements EventSimulator Interface
 * <p>
 * For simulation It generates Random values for an event using
 * {@link AttributeGenerator#generateAttributeValue(FeedSimulationStreamAttributeDto, String)}
 */
public class RandomDataEventSimulator implements EventSimulator {
    private static final Logger log = Logger.getLogger(RandomDataEventSimulator.class);
    private final Object lock = new Object();
    private volatile boolean isPaused = false;
    private volatile boolean isStopped = false;
    private RandomDataSimulationDto streamConfiguration;

    /**
     * Initialize RandomDataEventSimulator to start the simulation
     *
     * @param streamConfiguration
     */
    public RandomDataEventSimulator(RandomDataSimulationDto streamConfiguration) {
        this.streamConfiguration = streamConfiguration;
    }

    @Override
    public void pause() {
        isPaused = true;
    }

    @Override
    public void resume() {
        isPaused = false;
        synchronized (lock) {
            lock.notifyAll();
        }
    }

    @Override
    public void stop() {
        isPaused = true;
        isStopped = true;
        synchronized (lock) {
            lock.notifyAll();
        }
    }

    @Override
    public FeedSimulationStreamConfiguration getStreamConfiguration() {
        return streamConfiguration;
    }

    /**
     * start simulation for given configuration
     */
    @Override
    public void run() {
        sendEvent(ExecutionPlanDeployer.getInstance().getExecutionPlanDto(), streamConfiguration);
    }


    private void sendEvent(ExecutionPlanDto executionPlanDto, RandomDataSimulationDto randomDataSimulationConfig) {
        int delay = randomDataSimulationConfig.getDelay();
        if (delay <= 0) {
            log.warn("Events will be sent continuously since the delay between events are set to "
                    + delay + "milliseconds");
            delay = 0;
        }

        double nEvents = randomDataSimulationConfig.getEvents();
        StreamDefinitionDto streamDefinitionDto = executionPlanDto
                .getInputStreamDtoMap()
                .get(randomDataSimulationConfig.getStreamName());
        try {
            // Generate dummy attributes to warm up Random Data generation.
            // Because It takes some ms to generate 1st value.
            // It effects the delay between two events and trade off in performance also
            // So to reduce this draw back Initially it generates some dummy attributes
            String[] dummyAttribute =
                    new String[randomDataSimulationConfig.getFeedSimulationStreamAttributeDto().size()];
            for (int i = 0; i < 5; i++) {
                for (int j = 0; j < randomDataSimulationConfig.getFeedSimulationStreamAttributeDto().size(); j++) {
                    dummyAttribute[j] = AttributeGenerator.generateAttributeValue(
                            randomDataSimulationConfig.getFeedSimulationStreamAttributeDto().get(j),
                            streamDefinitionDto.getStreamAttributeDtos().get(j).getAttributeType());
                }
            }

            // at this point starts to generate random  attribute values and convert it into siddhi event
            // and send that event to input handler up to no of events reached to events given by user
            for (int i = 0; i < nEvents; i++) {
                int nAttributes = randomDataSimulationConfig.getFeedSimulationStreamAttributeDto().size();
                if (!isPaused) {
                    String[] attributeValue = new String[nAttributes];

                    //Generate Random values for each attribute
                    for (int j = 0; j < nAttributes; j++) {
                        attributeValue[j] = AttributeGenerator.generateAttributeValue(
                                randomDataSimulationConfig.getFeedSimulationStreamAttributeDto().get(j),
                                streamDefinitionDto.getStreamAttributeDtos().get(j).getAttributeType());
                    }

                    //convert Attribute values into event
                    Event event = EventConverter.eventConverter(randomDataSimulationConfig.getStreamName(), attributeValue, executionPlanDto);
                    //calculate percentage that event has send

                    // Percentage of send events
                    double percentage = ((i + 1) * 100) / nEvents;

                    System.out.println("Input Event (random feed) " + Arrays.deepToString(event.getEventData()) + "Percentage :" + percentage);// TODO: 13/12/16 delete sout
                    //send the event to input handler
                    EventSender.getInstance().sendEvent(event);
                    //delay between two events
                    if (delay > 0) {
                        Thread.sleep(delay);
                    }
                } else if (isStopped) {
                    break;
                } else {
                    synchronized (lock) {
                        try {
                            lock.wait();
                        } catch (InterruptedException e) {
                            Thread.currentThread().interrupt();
                            continue;
                        }
                    }
                }
            }
        } catch (EventSimulationException e) {
            log.error("Event dropped due to Error occurred during generating an event" + e.getMessage());
        } catch (InterruptedException e) {
            log.error("Error occurred during send event" + e.getMessage());
        }
    }
}